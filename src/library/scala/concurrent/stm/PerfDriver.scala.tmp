package scala.concurrent.stm

import skel.FastSimpleRandom

object PerfDriver {
//  def main(args: Array[String]) {
//    val rand = new FastSimpleRandom(0)
//    val values = (0 until 37) map { i => "foo" + i }
//    for (pass <- 0 until 100) {
//      val numThreads = (pass % 4) + 1
//      val reads = Array.tabulate(64) { _ => Ref(0) }
//      val writes = Array.tabulate(64) { _ => Ref(0) }
//      val threads = for (i <- 0 until numThreads) yield new Thread {
//        override def run() {
//          var i = 0
//          while (i < 1000000) {
//            i += 64
//            atomic { implicit txn =>
//              var j = 0
//              while (j < 64) {
//                reads(j)()
//                writes(j) += 1
//                j += 1
//              }
//            }
//            i += 1
//          }
//        }
//      }
//      val begin = System.currentTimeMillis
//      for (t <- threads) t.start()
//      for (t <- threads) t.join()
//      val elapsed = System.currentTimeMillis - begin
//      println(numThreads + ", threads total throughput is " + (elapsed / numThreads) + " nanos/op")
//    }
//  }

  // probability that two txns of size M touch the same element out of N
  // (M << N) is about 1 - (1 - M/N)^M

//  def main(args: Array[String]) {
//    val values = (0 until 37) map { i => "foo" + i }
//    for (pass <- 0 until 24) {
//      val numThreads = 1 + (pass % 4)
//      val m = Array.tabulate(1 << 15) { _ => Ref(values(0)) }
//      val threads = for (t <- 0 until numThreads) yield new Thread {
//        override def run {
//          var rand = new FastSimpleRandom(t)
//          var i = 0
//          while (i < 1000000) {
//            rand = atomic { implicit txn =>
//              val r = rand.clone
//              var j = 0
//              while (j < 64) {
//                val key = r.nextInt(m.length)
//                val pct = r.nextInt(100)
//                if (pct < 0)
//                  m(key)()
//                else
//                  m(key)() = values(r.nextInt(values.length))
//                j += 1
//              }
//              r
//            }
//            i += 64
//          }
//        }
//      }
//
//      val begin = System.currentTimeMillis
//      for (t <- threads) t.start()
//      for (t <- threads) t.join()
//      val elapsed = System.currentTimeMillis - begin
//
//      println(numThreads + " threads, total throughput was " + (elapsed / numThreads) + " nanos/op")
//    }
//  }

  def main(args: Array[String]) {
    val values = (0 until 37) map { i => "foo" + i }
    for (pass <- 0 until 24) {
      val numThreads = 1 + (pass % 4)
      val m = TMap.empty[Int, String]
      val threads = for (t <- 0 until numThreads) yield new Thread {
        override def run {
          var rand = new FastSimpleRandom(t)
          var i = 0
          while (i < 1000000) {
            rand = atomic { implicit txn =>
              val r = rand.clone
              var j = 0
              while (j < 64) {
                val key = r.nextInt(1 << 15)
                val pct = r.nextInt(100)
                if (pct < 0)
                  m.contains(key)
                else if (pct < 50)
                  m.put(key, values(r.nextInt(values.length)))
                else
                  m.remove(key)
                j += 1
              }
              r
            }
            i += 64
          }
        }
      }

      val begin = System.currentTimeMillis
      for (t <- threads) t.start()
      for (t <- threads) t.join()
      val elapsed = System.currentTimeMillis - begin

      println(numThreads + " threads, total throughput was " + (elapsed / numThreads) + " nanos/op")
    }
  }

//  def main(args: Array[String]) {
//    val rand = new FastSimpleRandom(0)
//    val values = (0 until 37) map { i => "foo" + i }
//    for (pass <- 0 until 100) {
//      val m = TMap.empty[Int, String].single
//      val begin = System.currentTimeMillis
//      var i = 0
//      while (i < 1000000) {
//        val key = rand.nextInt(1 << 18)
//        val pct = rand.nextInt(100)
//        if (pct < 80)
//          m.contains(key)
//        else if (pct < 90)
//          m.put(key, values(rand.nextInt(values.length)))
//        else
//          m.remove(key)
//        i += 1
//      }
//      val elapsed = System.currentTimeMillis - begin
//      println(elapsed + " nanos/op")
//    }
//  }
}
